{"version":3,"sources":["../src/singleton.ts"],"sourcesContent":["import type { FapiRequestInit, FapiResponse } from '@clerk/clerk-js/dist/types/core/fapiClient';\nimport { Clerk } from '@clerk/clerk-js/headless';\nimport type { HeadlessBrowserClerk } from '@clerk/clerk-react';\n\nimport type { TokenCache } from './cache';\nimport { MemoryTokenCache } from './cache';\nimport { errorThrower } from './errorThrower';\n\nClerk.sdkMetadata = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n};\n\nconst KEY = '__clerk_client_jwt';\n\n/**\n * @deprecated Use `getClerkInstance` instead. `Clerk` will be removed in the next major version.\n */\nexport let clerk: HeadlessBrowserClerk;\nlet __internal_clerk: HeadlessBrowserClerk | undefined;\n\ntype BuildClerkOptions = {\n  publishableKey?: string;\n  tokenCache?: TokenCache;\n};\n\n/**\n * Access or create a Clerk instance outside of React.\n * @example\n * import { ClerkProvider, getClerkInstance } from \"@clerk/expo\"\n *\n * const clerkInstance = getClerkInstance({ publishableKey: 'xxxx' })\n *\n * // Always pass the `publishableKey` to `ClerkProvider`\n * <ClerkProvider publishableKey={'xxxx'}>\n *     ...\n * </ClerkProvider>\n *\n * // Somewhere in your code, outside of React you can do\n * const token = await clerkInstance.session?.getToken();\n * fetch('http://example.com/', {headers: {Authorization: token })\n * @throws MissingPublishableKeyError publishableKey is missing and Clerk has not been initialized yet\n * @returns HeadlessBrowserClerk\n */\nexport function getClerkInstance(options?: BuildClerkOptions): HeadlessBrowserClerk {\n  const { publishableKey = process.env.CLERK_PUBLISHABLE_KEY || '', tokenCache = MemoryTokenCache } = options || {};\n\n  if (!__internal_clerk && !publishableKey) {\n    errorThrower.throwMissingPublishableKeyError();\n  }\n\n  // Support \"hot-swapping\" the Clerk instance at runtime. See JS-598 for additional details.\n  const hasKeyChanged = __internal_clerk && !!publishableKey && publishableKey !== __internal_clerk.publishableKey;\n\n  if (!__internal_clerk || hasKeyChanged) {\n    if (hasKeyChanged) {\n      tokenCache.clearToken?.(KEY);\n    }\n\n    const getToken = tokenCache.getToken;\n    const saveToken = tokenCache.saveToken;\n    __internal_clerk = clerk = new Clerk(publishableKey);\n\n    // @ts-expect-error\n    __internal_clerk.__unstable__onBeforeRequest(async (requestInit: FapiRequestInit) => {\n      // https://reactnative.dev/docs/0.61/network#known-issues-with-fetch-and-cookie-based-authentication\n      requestInit.credentials = 'omit';\n\n      requestInit.url?.searchParams.append('_is_native', '1');\n\n      const jwt = await getToken(KEY);\n      (requestInit.headers as Headers).set('authorization', jwt || '');\n    });\n\n    // @ts-expect-error\n    __internal_clerk.__unstable__onAfterResponse(async (_: FapiRequestInit, response: FapiResponse<unknown>) => {\n      const authHeader = response.headers.get('authorization');\n      if (authHeader) {\n        await saveToken(KEY, authHeader);\n      }\n    });\n  }\n  return __internal_clerk;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAAsB;AAItB,mBAAiC;AACjC,0BAA6B;AAE7B,sBAAM,cAAc;AAAA,EAClB,MAAM;AAAA,EACN,SAAS;AACX;AAEA,MAAM,MAAM;AAKL,IAAI;AACX,IAAI;AAyBG,SAAS,iBAAiB,SAAmD;AA5CpF;AA6CE,QAAM,EAAE,iBAAiB,QAAQ,IAAI,yBAAyB,IAAI,aAAa,8BAAiB,IAAI,WAAW,CAAC;AAEhH,MAAI,CAAC,oBAAoB,CAAC,gBAAgB;AACxC,qCAAa,gCAAgC;AAAA,EAC/C;AAGA,QAAM,gBAAgB,oBAAoB,CAAC,CAAC,kBAAkB,mBAAmB,iBAAiB;AAElG,MAAI,CAAC,oBAAoB,eAAe;AACtC,QAAI,eAAe;AACjB,uBAAW,eAAX,oCAAwB;AAAA,IAC1B;AAEA,UAAM,WAAW,WAAW;AAC5B,UAAM,YAAY,WAAW;AAC7B,uBAAmB,QAAQ,IAAI,sBAAM,cAAc;AAGnD,qBAAiB,4BAA4B,OAAO,gBAAiC;AAhEzF,UAAAA;AAkEM,kBAAY,cAAc;AAE1B,OAAAA,MAAA,YAAY,QAAZ,gBAAAA,IAAiB,aAAa,OAAO,cAAc;AAEnD,YAAM,MAAM,MAAM,SAAS,GAAG;AAC9B,MAAC,YAAY,QAAoB,IAAI,iBAAiB,OAAO,EAAE;AAAA,IACjE,CAAC;AAGD,qBAAiB,4BAA4B,OAAO,GAAoB,aAAoC;AAC1G,YAAM,aAAa,SAAS,QAAQ,IAAI,eAAe;AACvD,UAAI,YAAY;AACd,cAAM,UAAU,KAAK,UAAU;AAAA,MACjC;AAAA,IACF,CAAC;AAAA,EACH;AACA,SAAO;AACT;","names":["_a"]}