{"version":3,"sources":["../src/ClerkProvider.tsx"],"sourcesContent":["import './polyfills';\n\nimport type { ClerkProviderProps as ClerkReactProviderProps } from '@clerk/clerk-react';\nimport { ClerkProvider as ClerkReactProvider } from '@clerk/clerk-react';\nimport React from 'react';\n\nimport type { TokenCache } from './cache';\nimport { isReactNative } from './runtime';\nimport { getClerkInstance } from './singleton';\n\nexport type ClerkProviderProps = ClerkReactProviderProps & {\n  tokenCache?: TokenCache;\n};\n\nexport function ClerkProvider(props: ClerkProviderProps): JSX.Element {\n  const { children, tokenCache, publishableKey, ...rest } = props;\n  const pk = publishableKey || process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY || process.env.CLERK_PUBLISHABLE_KEY || '';\n\n  return (\n    <ClerkReactProvider\n      // Force reset the state when the provided key changes, this ensures that the provider does not retain stale state.\n      // See JS-598 for additional context.\n      key={pk}\n      {...rest}\n      publishableKey={pk}\n      Clerk={getClerkInstance({ publishableKey: pk, tokenCache })}\n      standardBrowser={!isReactNative()}\n    >\n      {children}\n    </ClerkReactProvider>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAO;AAGP,yBAAoD;AACpD,mBAAkB;AAGlB,qBAA8B;AAC9B,uBAAiC;AAM1B,SAAS,cAAc,OAAwC;AACpE,QAAM,EAAE,UAAU,YAAY,gBAAgB,GAAG,KAAK,IAAI;AAC1D,QAAM,KAAK,kBAAkB,QAAQ,IAAI,qCAAqC,QAAQ,IAAI,yBAAyB;AAEnH,SACE,6BAAAA,QAAA;AAAA,IAAC,mBAAAC;AAAA,IAAA;AAAA,MAGC,KAAK;AAAA,MACJ,GAAG;AAAA,MACJ,gBAAgB;AAAA,MAChB,WAAO,mCAAiB,EAAE,gBAAgB,IAAI,WAAW,CAAC;AAAA,MAC1D,iBAAiB,KAAC,8BAAc;AAAA;AAAA,IAE/B;AAAA,EACH;AAEJ;","names":["React","ClerkReactProvider"]}