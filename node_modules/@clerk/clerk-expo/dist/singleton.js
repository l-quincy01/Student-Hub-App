"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var singleton_exports = {};
__export(singleton_exports, {
  clerk: () => clerk,
  getClerkInstance: () => getClerkInstance
});
module.exports = __toCommonJS(singleton_exports);
var import_headless = require("@clerk/clerk-js/headless");
var import_cache = require("./cache");
var import_errorThrower = require("./errorThrower");
import_headless.Clerk.sdkMetadata = {
  name: "@clerk/clerk-expo",
  version: "1.2.1"
};
const KEY = "__clerk_client_jwt";
let clerk;
let __internal_clerk;
function getClerkInstance(options) {
  var _a;
  const { publishableKey = process.env.CLERK_PUBLISHABLE_KEY || "", tokenCache = import_cache.MemoryTokenCache } = options || {};
  if (!__internal_clerk && !publishableKey) {
    import_errorThrower.errorThrower.throwMissingPublishableKeyError();
  }
  const hasKeyChanged = __internal_clerk && !!publishableKey && publishableKey !== __internal_clerk.publishableKey;
  if (!__internal_clerk || hasKeyChanged) {
    if (hasKeyChanged) {
      (_a = tokenCache.clearToken) == null ? void 0 : _a.call(tokenCache, KEY);
    }
    const getToken = tokenCache.getToken;
    const saveToken = tokenCache.saveToken;
    __internal_clerk = clerk = new import_headless.Clerk(publishableKey);
    __internal_clerk.__unstable__onBeforeRequest(async (requestInit) => {
      var _a2;
      requestInit.credentials = "omit";
      (_a2 = requestInit.url) == null ? void 0 : _a2.searchParams.append("_is_native", "1");
      const jwt = await getToken(KEY);
      requestInit.headers.set("authorization", jwt || "");
    });
    __internal_clerk.__unstable__onAfterResponse(async (_, response) => {
      const authHeader = response.headers.get("authorization");
      if (authHeader) {
        await saveToken(KEY, authHeader);
      }
    });
  }
  return __internal_clerk;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  clerk,
  getClerkInstance
});
//# sourceMappingURL=singleton.js.map